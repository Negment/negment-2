<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sine Wave Synthesizer with Spectrum Analyzer</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; padding: 20px; }
        textarea { width: 95%; height: 200px; padding: 10px; font-size: 16px; margin-bottom: 10px; }
        button { padding: 10px 20px; font-size: 16px; margin-right: 10px; }
        canvas { border: 1px solid #ccc; margin-top: 20px; background-color: #f5f5f5; }
    </style>
</head>
<body>

    <h1>Sine Wave Synthesizer with Spectrum Analyzer</h1>
    <p>
        一行に一つの音データを入力してください。<br>
        書式：<br>
        - **正弦波:** 周波数(Hz),r=音量(0.0-1.0)<br>
        - **ノイズ:** 最小周波数(Hz)_最大周波数(Hz),r=音量(0.0-1.0)<br>
        例: <br>
        440,r=0.5<br>
        440_880,r=0.1
    </p>

    <textarea id="dataInput">
514.0988372,r=0.9
257.049186,r=0.7
440_880,r=0.1</textarea>
    
    <button id="playButton">再生</button>
    <button id="stopButton" disabled>停止</button>
    
    <canvas id="analyzerCanvas" width="800" height="200"></canvas>

    <script>
        let audioCtx;
        let sources = [];
        let analyser;
        let canvasCtx;
        let animationFrame;

        const FFT = (function() {
            function FFT(size) {
                this.size = size;
                this.csize = size / 2;
                this.size_log = Math.log2(size);
            }

            FFT.prototype.transform = function(re, im) {
                let m = this.size_log;
                let n = this.size;
                let csize = this.csize;

                for (let k = 0; k < n; k++) {
                    let j = 0;
                    for (let i = 0; i < m; i++) {
                        j |= (((k >> i) & 1) << (m - 1 - i));
                    }
                    if (j > k) {
                        let temp = re[k];
                        re[k] = re[j];
                        re[j] = temp;
                        temp = im[k];
                        im[k] = im[j];
                        im[j] = temp;
                    }
                }

                let a, b, c, s, angle, len, len_csize, len_csize_s, tr, ti;

                for (let h = 2; h <= n; h <<= 1) {
                    angle = -2 * Math.PI / h;
                    len_csize_s = Math.cos(angle);
                    len_csize = Math.sin(angle);
                    a = 1;
                    b = 0;
                    for (let j = 0; j < h / 2; j++) {
                        for (let k = j; k < n; k += h) {
                            c = re[k + h / 2] * a - im[k + h / 2] * b;
                            s = re[k + h / 2] * b + im[k + h / 2] * a;
                            re[k + h / 2] = re[k] - c;
                            im[k + h / 2] = im[k] - s;
                            re[k] += c;
                            im[k] += s;
                        }
                        tr = a;
                        a = a * len_csize_s - b * len_csize;
                        b = tr * len_csize + b * len_csize_s;
                    }
                }
            };

            FFT.prototype.inverseTransform = function(re, im) {
                let n = this.size;
                im = im.map(val => -val);
                this.transform(re, im);
                im = im.map(val => -val);
                re = re.map(val => val / n);
                im = im.map(val => val / n);
                return [re, im];
            };

            return FFT;
        })();

        document.getElementById('playButton').addEventListener('click', playSound);
        document.getElementById('stopButton').addEventListener('click', stopSound);

        function setupAudioContext() {
            if (!audioCtx) {
                audioCtx = new (window.AudioContext || window.webkitAudioContext)();
            }
            if (!analyser) {
                analyser = audioCtx.createAnalyser();
                analyser.fftSize = 2048;
                analyser.smoothingTimeConstant = 0.8;
                analyser.connect(audioCtx.destination);
            }
        }

        async function createBandpassNoiseBuffer(minFreq, maxFreq, gainValue) {
            const sampleRate = audioCtx.sampleRate;
            const fftSize = 4096;
            const fft = new FFT(fftSize);
            
            const re = new Float32Array(fftSize);
            const im = new Float32Array(fftSize).fill(0);
            
            for (let i = 0; i < fftSize; i++) {
                re[i] = Math.random() * 2 - 1;
            }

            fft.transform(re, im);

            const freqResolution = sampleRate / fftSize;
            const minBin = Math.floor(minFreq / freqResolution);
            const maxBin = Math.floor(maxFreq / freqResolution);
            const bandWidthBins = maxBin - minBin;

            for (let i = 0; i < fftSize / 2; i++) {
                if (i < minBin || i > maxBin) {
                    re[i] = 0;
                    im[i] = 0;
                    re[fftSize - i] = 0;
                    im[fftSize - i] = 0;
                }
            }

            const [outRe] = fft.inverseTransform(re, im);
            
            const noiseBuffer = audioCtx.createBuffer(1, fftSize, sampleRate);
            const output = noiseBuffer.getChannelData(0);

            let maxAmp = 0;
            for (let i = 0; i < fftSize; i++) {
                if (Math.abs(outRe[i]) > maxAmp) {
                    maxAmp = Math.abs(outRe[i]);
                }
            }

            if (maxAmp > 0) {
                // ここで帯域幅の平方根を乗算して補正
                const adjustedGain = (bandWidthBins > 0) ? gainValue * Math.sqrt(bandWidthBins) : 0;
                for (let i = 0; i < fftSize; i++) {
                    output[i] = (outRe[i] / maxAmp) * adjustedGain;
                }
            } else {
                for (let i = 0; i < fftSize; i++) {
                    output[i] = 0;
                }
            }

            return noiseBuffer;
        }

        async function playSound() {
            if (sources.length > 0) return;
            setupAudioContext();

            document.getElementById('playButton').disabled = true;

            const inputData = document.getElementById('dataInput').value.trim().split('\n');
            const masterGainNode = audioCtx.createGain();
            masterGainNode.gain.value = 0.5;
            masterGainNode.connect(analyser);

            sources = [];

            for (const line of inputData) {
                const parts = line.split(',r=');
                if (parts.length === 2) {
                    const params = parts[0].trim().split('_');
                    const gainValue = parseFloat(parts[1].trim());

                    if (params.length === 1 && !isNaN(parseFloat(params[0]))) {
                        const frequency = parseFloat(params[0]);
                        const oscillator = audioCtx.createOscillator();
                        const gainNode = audioCtx.createGain();
                        oscillator.type = 'sine';
                        oscillator.frequency.value = frequency;
                        gainNode.gain.value = gainValue;
                        oscillator.connect(gainNode);
                        gainNode.connect(masterGainNode);
                        oscillator.start();
                        sources.push(oscillator);

                    } else if (params.length === 2 && !isNaN(parseFloat(params[0])) && !isNaN(parseFloat(params[1]))) {
                        const minFreq = parseFloat(params[0]);
                        const maxFreq = parseFloat(params[1]);

                        const numBands = 4;
                        const bandWidth = (maxFreq - minFreq) / numBands;

                        for (let i = 0; i < numBands; i++) {
                            const currentMinFreq = minFreq + i * bandWidth;
                            const currentMaxFreq = minFreq + (i + 1) * bandWidth;
                            const buffer = await createBandpassNoiseBuffer(currentMinFreq, currentMaxFreq, gainValue / numBands);
                            const noiseSource = audioCtx.createBufferSource();
                            noiseSource.buffer = buffer;
                            noiseSource.loop = true;
                            noiseSource.connect(masterGainNode);
                            noiseSource.start();
                            sources.push(noiseSource);
                        }
                    }
                }
            }

            document.getElementById('playButton').disabled = false;
            document.getElementById('stopButton').disabled = false;
            drawSpectrum();
        }

        function stopSound() {
            sources.forEach(source => {
                if (source && typeof source.stop === 'function') {
                    source.stop();
                }
            });
            sources = [];
            
            cancelAnimationFrame(animationFrame);
            
            if (canvasCtx) {
                canvasCtx.clearRect(0, 0, 800, 200);
            }
            
            document.getElementById('playButton').disabled = false;
            document.getElementById('stopButton').disabled = true;
        }

        function drawSpectrum() {
            if (!analyser) return;

            const bufferLength = analyser.frequencyBinCount;
            const dataArray = new Uint8Array(bufferLength);
            
            if (!canvasCtx) {
                const canvas = document.getElementById('analyzerCanvas');
                canvasCtx = canvas.getContext('2d');
            }

            canvasCtx.clearRect(0, 0, 800, 200);

            analyser.getByteFrequencyData(dataArray);

            const barWidth = (800 / bufferLength) * 2.5;
            let x = 0;

            for (let i = 0; i < bufferLength; i++) {
                const barHeight = dataArray[i];
                canvasCtx.fillStyle = 'rgb(' + (barHeight + 100) + ',50,50)';
                canvasCtx.fillRect(x, 200 - barHeight / 2, barWidth, barHeight / 2);
                x += barWidth + 1;
            }

            animationFrame = requestAnimationFrame(drawSpectrum);
        }
    </script>
</body>
</html>
